// Code generated by go-bindata.
// sources:
// example_aegis
// example_main
// DO NOT EDIT!

package function

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _example_aegis = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\x4f\xe5\x4a\x8b\xca\x9f\x8b\x6f\xa9\x04\x12\x12\x42\x1c\xb8\x70\xaa\x26\xf6\xcb\xae\x85\x63\x5b\x1e\xbb\xe9\x7e\x7b\xe4\x64\x77\x11\x20\x7a\xca\xc8\xef\xcd\x9b\xf9\x4d\x24\x67\x33\x00\x51\x16\x1a\x7c\x7c\x96\x25\x07\x62\xe4\xc1\x2b\xc6\x9c\x07\xe0\x27\x99\x1f\x9a\x0f\xee\x93\x0f\x54\x83\x59\x82\x72\x90\x55\x7b\x5b\xe1\xc1\xa7\x68\xd0\xf4\x96\xa2\xf5\xf6\x7e\x08\xb2\x4c\x4e\xba\xe6\xa8\xb6\xf8\x5c\x37\xc3\x18\xc1\x3f\xc2\x65\x0b\x9f\x5b\xb4\xdd\xf0\x75\x1b\x2f\x5d\x79\x3c\xfb\x06\xe0\x15\x46\x38\xce\xd2\x42\x05\x9f\x69\x5b\xb7\xa2\xa4\x40\xac\x3e\x04\x4c\x84\x2d\x94\x4a\x87\x39\x15\x9c\x52\x7b\x8d\xa9\xd5\x5e\xc0\x4a\x84\x84\x55\x4e\x8a\xa6\x84\x40\x33\xad\x9f\xbd\x45\x8a\xbc\xdb\xc2\x7b\x90\x81\x94\x68\x3a\x8d\x97\xc5\x98\xfb\xb7\xef\xde\x7f\x30\x5d\x78\xb3\x2f\xb3\xe3\x3c\x5e\xf6\x1c\x24\xfb\xff\x9e\xeb\xdb\xe7\x97\xa8\x37\xb5\x13\xdd\xe4\x92\xdc\x0d\xb4\xca\xe1\x5f\x0e\x69\x35\x2d\x52\xbd\x95\x10\x4e\x77\xf8\x71\x26\x71\x9c\x7d\xe4\xde\xa3\x38\xb2\x10\xa2\x58\x19\x42\xff\xee\x51\x4f\x52\xbc\x4c\x81\xba\xd3\x7d\x3f\x52\xf9\xb7\x04\x29\x44\x16\x55\x3a\xf8\x88\x7a\x24\xf8\xc4\x58\xb1\x50\xb5\x3b\x6b\xea\xd7\x2b\xf8\xb2\x71\x5f\xff\xcf\x1e\xb9\x8f\x37\x5b\x0d\x74\x8c\x4b\x7d\xb9\x48\x7f\xbb\x3e\x5d\xa7\xfe\x76\x01\x73\x4a\x06\x0f\x52\x7e\x05\x00\x00\xff\xff\x92\xd2\xdf\x14\x78\x02\x00\x00")

func example_aegisBytes() ([]byte, error) {
	return bindataRead(
		_example_aegis,
		"example_aegis",
	)
}

func example_aegis() (*asset, error) {
	bytes, err := example_aegisBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example_aegis", size: 632, mode: os.FileMode(436), modTime: time.Unix(1523504921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _example_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\x3f\x5f\x7e\xf6\xe0\xda\xc5\xd0\x53\x80\x1e\x86\xae\x6b\x37\x6c\x5d\xd1\x3f\xdb\x61\x18\x06\xc6\x66\x6c\xad\xb2\xe8\x4a\xf4\x92\x22\xc8\x77\x1f\x64\xa5\x6d\x5a\x74\xf7\x1e\x02\x0a\x11\x49\xbd\xf7\xf8\xe8\x01\xeb\x1b\x6c\x09\x7a\xd4\x56\x29\xdd\x0f\xec\x04\x32\x95\xa4\x35\x5b\xa1\x95\xa4\x2a\x49\x0d\xb7\x21\x58\x92\x6a\x74\x26\x1c\x5b\x2d\xdd\x38\x2f\x6b\xee\x2b\x5c\xfa\xf0\xdb\x33\xd8\xcf\x1b\xdc\x6b\xb9\x8a\xa7\xc7\x7a\xa4\x56\x7b\xd8\xad\x91\x1e\x35\x3a\x16\xae\xa6\xbb\x6a\xe1\xb0\xa7\x25\xbb\x9b\x54\xe5\x4a\x2d\x46\x5b\x4f\x78\xb2\x1c\xd6\x2a\xa9\x2a\x38\x45\xdb\x18\x02\xb4\xf0\xee\xfc\xe3\x09\x0a\x2d\xf1\xee\xdc\xf1\xea\xee\x82\x6e\x47\xf2\x02\xf4\x87\xac\xc0\x52\x4b\x07\x08\xd7\x17\x9f\xc1\xd1\x2d\x8d\x5e\x60\x40\xe9\xe0\x82\x47\x21\xa7\x12\x37\x45\x98\x1d\xc2\xf4\x6c\x79\x46\xcb\x78\x95\x2d\xd0\x98\xab\xce\xf1\xd8\x76\xf9\x7d\x5e\x19\x5f\xcd\xd2\x93\xe3\xab\xb4\x80\xb4\x4a\x0b\x70\xcc\x52\x40\x47\xc6\xf0\x17\xdd\x34\x86\x96\xe8\x28\x57\xc9\x84\xf2\xda\x47\x88\x13\x5d\x6d\x85\xdc\x02\x6b\x02\x61\xd0\xf6\x37\xd5\x02\x3c\x88\x66\x8b\x06\x1a\x1a\xc8\x36\x64\x6b\x4d\x53\x26\x43\x37\xbd\xe5\xfc\xd4\x08\x6d\x03\x5e\xd0\x09\x18\xed\x85\xac\xb6\x2d\x2c\xd8\x45\x96\xbe\x54\x09\x0e\xc3\x13\x16\x59\x3c\x9d\x6e\x9b\xac\x55\x92\x44\x62\x33\x88\x5c\x0a\x95\x6c\xf2\xa9\xae\xbc\x0c\x8d\xb3\x5c\x6d\x94\xaa\x2a\xd8\x21\xbe\xc5\xe0\x01\xed\x5d\xd4\x4d\x3a\x14\xa8\x79\x34\x8d\xfd\x5f\x60\x1e\x4c\x22\x75\x47\x4d\xa0\x84\x96\xa5\x23\x77\x0f\x3c\x0e\x6d\xa7\x5b\x56\xcb\x0a\xb6\x1e\x28\x8f\x62\x2c\xa0\x81\x37\x4f\xa0\xbe\xdf\x11\xa2\x08\x43\xbb\xbf\x7f\x79\xce\x21\xc5\xff\x33\xc5\x0f\x6c\x3d\x15\x30\xa0\xc3\xde\xc3\xe8\x4c\xf9\x0d\xcd\x48\x3e\x07\x72\x8e\x5d\x30\x93\x23\x1f\x14\x90\xd1\x1f\x71\x43\x70\x08\x07\xfb\x07\xe1\x5f\x19\x9d\x05\xab\xcd\x56\x96\x30\x67\xd0\x3e\xb2\x0b\xf2\x9f\x1c\x5f\x05\x07\x80\xb6\x20\x9d\xf6\x50\xa3\xa7\xc8\x39\xa4\xbe\x52\xb2\xa6\x2e\xe0\x57\x30\xca\x93\x8d\x2c\x3f\x38\xee\xb7\x20\x03\xf0\x3c\xaa\xf2\xe9\xf2\xeb\x59\xf6\x76\x7f\xbf\x80\x1e\x87\x1f\x5e\x9c\xb6\xed\xcf\x07\x17\xaf\x37\xeb\x74\xb2\x5f\x3a\x0b\xc8\x0b\x78\xf8\x3e\xcc\xc0\xd4\x9b\xfc\x05\x0d\x9f\x6d\x49\x90\x13\xc1\xeb\x7e\x30\x04\xb4\xc2\x29\xf2\x02\xfa\x87\x8c\xa8\xe7\xb3\xb2\xd7\x25\xed\x9c\xd9\x4c\xca\x72\x5b\x9e\x3b\x6d\xc5\xd8\x2c\x3d\x0d\x88\xe1\xc8\xf0\xd8\x7c\x0f\x0b\xf2\x5f\xfa\x28\x87\xb8\x91\xd4\xe6\x6f\x00\x00\x00\xff\xff\xda\x0c\xff\x0f\x65\x05\x00\x00")

func example_mainBytes() ([]byte, error) {
	return bindataRead(
		_example_main,
		"example_main",
	)
}

func example_main() (*asset, error) {
	bytes, err := example_mainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example_main", size: 1381, mode: os.FileMode(436), modTime: time.Unix(1523503135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example_aegis": example_aegis,
	"example_main":  example_main,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example_aegis": &bintree{example_aegis, map[string]*bintree{}},
	"example_main":  &bintree{example_main, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
